#!/bin/bash
# Terminal Cheat Sheet

# pacman = official repos only (needs sudo)
# yay/paru = supports AUR (run as user, not sudo)

echo -e "\033[1m=========================\033[0m"
echo -e " üåü Terminal Commands üåü "
echo -e "\033[1m=========================\033[0m"
echo ""
echo ""
echo -e "[1;37m --- üì¶ PACKAGE MANAGEMENT üì¶ ---[0m[0m"
echo ""
echo -e "[38;5;196msudo pacman -Syu                   	[0m [90m# Update system[0m[0m"
echo -e "[38;5;196msudo pacman -S <package>           	[0m [90m# Install package[0m[0m"
echo -e "[38;5;196msudo pacman -Rns <package>         	[0m [90m# Remove package and dependencies[0m[0m"
echo -e "[38;5;196msudo pacman -Qdt                   	[0m [90m# List orphaned packages[0m[0m"
echo -e "[38;5;196msudo pacman -Sc                    	[0m [90m# Clean old package cache[0m[0m"
echo -e "[38;5;196mparu -S <package>                  	[0m [90m# Install AUR package[0m[0m"
echo -e "[38;5;196mparu -Syu                          	[0m [90m# Sync and upgrade all packages including AUR[0m[0m"
echo -e "[38;5;196mparu -Ss <keyword>                 	[0m [90m# Search for packages in official repos and AUR[0m[0m"
echo -e "[38;5;196mparu -Rns <package>                	[0m [90m# Remove package and its dependencies[0m[0m"
echo -e "[38;5;196mparu -G <package>                  	[0m [90m# Download and inspect the AUR PKGBUILD[0m[0m"
echo -e "[38;5;196myay -Syu                           	[0m [90m# Update system and AUR packages[0m[0m"
echo -e "[38;5;196myay -Ss <keyword>                  	[0m [90m# Search packages from all sources[0m[0m"
echo -e "[38;5;196myay -Rns <package>                 	[0m [90m# Remove package + dependencies[0m[0m"
echo -e "[38;5;196myay -Qe                            	[0m [90m# List explicitly installed packages[0m[0m"
echo -e "[38;5;196myay -Qi <package>                  	[0m [90m# Show detailed info about a package[0m[0m"
echo -e "[38;5;196mflatpak install flathub <package>	[0m [90m# Install a Flatpak app from a remote (e.g. flathub)[0m[0m"
echo -e "[38;5;196mflatpak uninstall <package>		[0m [90m# Remove a Flatpak app[0m[0m"
echo -e "[38;5;196mflatpak uninstall --unused		[0m [90m# Remove orphaned runtimes not in use[0m[0m"
echo -e "[38;5;196mflatpak list				[0m [90m# List installed Flatpak apps and runtimes[0m[0m"
echo -e "[38;5;196mflatpak update				[0m [90m# Update all installed Flatpaks[0m[0m"
echo -e "[38;5;196meos-update --aur			[0m [90m# Package updater for EOS including AUR[0m[0m"
echo ""
echo -e "[1;37m --- MONITORING üëÄ ---[0m[0m"
echo ""
echo -e "[38;5;208mfastfetch                          	[0m [90m# Display system info[0m[0m"
echo -e "[38;5;208mglances                            	[0m [90m# Detailed system monitor[0m[0m"
echo -e "[38;5;208mbaobab                                  [0m [90m# GUI disk usage analyzer[0m[0m"
echo -e "[38;5;208mdf -h                              	[0m [90m# Disk space usage[0m[0m"
echo -e "[38;5;208mdu -h --max-depth=1                	[0m [90m# Folder size summary[0m[0m"
echo -e "[38;5;208mlsblk -f                              	[0m [90m# Shows your disks, partitions, and UUID's[0m[0m"
echo -e "[38;5;208mfree -h                            	[0m [90m# RAM and swap usage[0m[0m"
echo -e "[38;5;208mgeekbench5				[0m [90m# System performance benchmark[0m[0m"
echo ""
echo -e "[1;37m --- üåê NETWORKING üåê ---[0m[0m"
echo ""
echo -e "[38;5;226mip a                               	[0m [90m# Show IP and interfaces[0m[0m"
echo -e "[38;5;226mss -tulnp                          	[0m [90m# Show open ports[0m[0m"
echo -e "[38;5;226msudo nmap -A <10.0.0.x>                 [0m [90m# Show network usage[0m[0m"
echo -e "[38;5;226msudo nmap -p 1-65535 -T4 <10.0.0.x>	[0m [90m# Scans ALL TCP ports on the given IP[0m[0m"
echo -e "[38;5;226msudo wireshark                     	[0m [90m# Live network monitoring GUI[0m[0m"
echo -e "[38;5;226msudo iftop -i enp3s0               	[0m [90m# Realtime bandwidth usage[0m[0m"
echo -e "[38;5;226msudo tshark -i enp3s0              	[0m [90m# Packet capture CLI[0m[0m"
echo -e "[38;5;226msudo tcpdump -i enp3s0             	[0m [90m# Lightweight packet capture[0m[0m"
echo -e "[38;5;226msudo etherape                      	[0m [90m# Visual traffic graph[0m[0m"
echo -e "[38;5;226mmtr <IP/url>                     	[0m [90m# Network path analysis[0m[0m"
echo -e "[38;5;226mtraceroute <IP/url>              	[0m [90m# Trace packet route[0m[0m"
echo -e "[38;5;226mping -c 4 1.1.1.1                  	[0m [90m# Test network connectivity[0m[0m"
echo -e "[38;5;226mwget -c <url>                      	[0m [90m# Resume downloads[0m[0m"
echo -e "[38;5;226mspeedtest-cli				[0m [90m# Internet bandwidth + latency test[0m[0m"
echo ""
echo -e "[1;37m --- üß± FIREWALL & SECURITY üîí ---[0m[0m"
echo ""
echo -e "[38;5;46msudo ufw enable                    	[0m [90m# Enable UFW firewall[0m[0m"
echo -e "[38;5;46msudo ufw disable                    	[0m [90m# Disable UFW firewall[0m[0m"
echo -e "[38;5;46msudo ufw allow 22/tcp              	[0m [90m# Allow SSH through firewall[0m[0m"
echo -e "[38;5;46msudo ufw status                    	[0m [90m# Show UFW firewall rules[0m[0m"
echo -e "[38;5;46msudo systemctl start firewalld		[0m [90m# Start the firewalld service[0m[0m"
echo -e "[38;5;46msudo systemctl stop firewalld		[0m [90m# Stop firewalld (disables immediately)[0m[0m"
echo -e "[38;5;46msudo firewall-cmd --zone=home --list-all[0m [90m# List ALL rules for a specific zone (e.g., home)[0m[0m"
echo -e "[38;5;46msudo firewall-cmd --reload		[0m [90m# Reload firewalld to apply changes[0m[0m"
echo -e "[38;5;46msudo fail2ban-client status sshd   	[0m [90m# SSH protection status[0m[0m"
echo -e "[38;5;46mclamtk					[0m [90m# ClamScan GUI tool[0m[0m"
echo -e "[38;5;46msudo freshclam				[0m [90m# Manually update anti-virus signatures[0m[0m"
echo -e "[38;5;46mclamscan <file path>			[0m [90m# Scan a specific file[0m[0m"
echo -e "[38;5;46mclamscan -r <dir>			[0m [90m# Scan an entire directory (recursively)[0m[0m"
echo -e "[38;5;46mclamscan -r --infected <dir>		[0m [90m# Scan with 'infected' file summary[0m[0m"
echo -e "[38;5;46msudo lynis audit system            	[0m [90m# System audit tool[0m[0m"
echo -e "[38;5;46msudo rkhunter --check             	[0m [90m# Scan for rootkits[0m[0m"
echo -e "[38;5;46msudo rkhunter --update              	[0m [90m# Update Rootkit Hunter[0m[0m"
echo -e "[38;5;46msudo rkhunter --propupd            	[0m [90m# Update trusted file properties (caution)[0m[0m"
echo ""
echo -e "[1;37m --- üìÅ FILE MANAGEMENT üìÅ ---[0m[0m"
echo ""
echo -e "[38;5;51mls -la                             	[0m [90m# List ALL files[0m[0m"
echo -e "[38;5;51mcd <dir>                           	[0m [90m# Enter/Change directory[0m[0m"
echo -e "[38;5;51mcd ..                              	[0m [90m# Go up a level[0m[0m"
echo -e "[38;5;51mpwd                                	[0m [90m# Show current directory[0m[0m"
echo -e "[38;5;51mmkdir <dir>                        	[0m [90m# Create folder[0m[0m"
echo -e "[38;5;51mrm <file>                          	[0m [90m# Remove file[0m[0m"
echo -e "[38;5;51mrm -r <dir>                        	[0m [90m# Remove folder[0m[0m"
echo -e "[38;5;51mrm -rf <dir>                        	[0m [90m# Force deletes without y/n confirmation[0m[0m"
echo -e "[38;5;51mcp <file1> <file2>                 	[0m [90m# Copy file[0m[0m"
echo -e "[38;5;51mcp -r <dir1> <dir2>                	[0m [90m# Copy directory to new directory[0m[0m"
echo -e "[38;5;51mmv <old> <new>                     	[0m [90m# Rename (if same dir) or move (diff paths)[0m[0m"
echo -e "[38;5;51mln -s <dir1> <dir2>			[0m [90m# Creates a symbolic link (symlink) between directories[0m[0m"
echo -e "[38;5;51mcat <file>                         	[0m [90m# View file contents[0m[0m"
echo -e "[38;5;51mstat <file>                        	[0m [90m# File metadata[0m[0m"
echo -e "[38;5;51mfind / -name <file>                	[0m [90m# Find file globally[0m[0m"
echo -e "[38;5;51mdf -h                               	[0m [90m# Show all mounted partitions[0m[0m"
echo -e "[38;5;51mdu -sh *                           	[0m [90m# Size of items in folder[0m[0m"
echo -e "[38;5;51mtar -xvf <tar file>			[0m [90m# Extract a .tar.gz archive[0m[0m"
echo -e "[38;5;51msudo gparted				[0m [90m# Partition editing tool[0m[0m"
echo ""
echo -e "[1;37m --- üë• USERS & PERMISSIONS üìñ ---[0m[0m"
echo ""
echo -e "[38;5;27mid					[0m [90m# Show user ID[0m[0m"
echo -e "[38;5;27mwhoami                             	[0m [90m# Show current user[0m[0m"
echo -e "[38;5;27mpasswd                             	[0m [90m# Change password[0m[0m"
echo -e "[38;5;27msudo usermod -aG wheel <user>      	[0m [90m# Add user to sudo group[0m[0m"
echo -e "[38;5;27msudo groupadd <group>			[0m [90m# Create a new group[0m[0m"
echo -e "[38;5;27mchmod 644 <file>                   	[0m [90m# Set file permissions (rw-r--r--)[0m[0m"
echo -e "[38;5;27mchmod 755 <script.sh>              	[0m [90m# Set script as executable (for everyone)[0m[0m"
echo -e "[38;5;27mchown user:group <file>            	[0m [90m# Change file owner[0m[0m"
echo -e "[38;5;27msudo chown -R $USER:$USER <file path>	[0m [90m# Set full ownership of a file path to your user[0m[0m"
echo -e "[38;5;27mchmod +x <file path>                    [0m [90m# Make the file/script executable[0m[0m"
echo ""
echo -e "[1;37m --- ‚öôÔ∏è  PROCESS MANAGEMENT ‚öôÔ∏è  ---[0m[0m"
echo ""
echo -e "[38;5;135mhtop                               	[0m [90m# Interactive process viewer[0m[0m"
echo -e "[38;5;135mbtop                               	[0m [90m# System resource dashboard (htop on steroids)[0m[0m"
echo -e "[38;5;135mps aux                             	[0m [90m# List all processes[0m[0m"
echo -e "[38;5;135mpstree                             	[0m [90m# View process tree hierarchy[0m[0m"
echo -e "[38;5;135mtop                                	[0m [90m# Resource usage[0m[0m"
echo -e "[38;5;135mpidof <name>				[0m [90m# Get the PID(s) of a specific running process[0m[0m"
echo -e "[38;5;135mpgrep <pattern>				[0m [90m# Find PID(s) matching a name/pattern[0m[0m"
echo -e "[38;5;135mpkill -f <name>				[0m [90m# Kill process by command-name matching[0m[0m"
echo -e "[38;5;135msudo kill <PID>                    	[0m [90m# Kill process by ID[0m[0m"
echo -e "[38;5;135msudo killall <name>                	[0m [90m# Kill by specific name[0m[0m"
echo -e "[38;5;135msudo pkill <name>                  	[0m [90m# Kill by pattern[0m[0m"
echo ""
echo -e "[1;37m --- üñ• SYSTEM & LOGGING üìù ---[0m[0m"
echo ""
echo -e "[38;5;200mxrandr					[0m [90m# CLI display/resolution info[0m[0m"
echo -e "[38;5;200mjournalctl -xe                     	[0m [90m# View detailed system logs[0m[0m"
echo -e "[38;5;200mjournalctl -b                      	[0m [90m# Show logs from current boot[0m[0m"
echo -e "[38;5;200mjournalctl -p 3 -xb                	[0m [90m# Show errors from current boot[0m[0m"
echo -e "[38;5;200mnvidia-settings				[0m [90m# Display and GPU settings[0m[0m"
echo -e "[38;5;200mtldr <command>                     	[0m [90m# Simple TLDR-style page[0m[0m"
echo -e "[38;5;200mman <command>                      	[0m [90m# Full manual page[0m[0m"
echo -e "[38;5;200msudo dmesg | tail                       [0m [90m# Hardware/Driver/Boot Event logs from the Kernel[0m[0m"
echo -e "[38;5;200msudo systemctl status <service>    	[0m [90m# Check service status[0m[0m"
echo -e "[38;5;200msudo systemctl restart <service>   	[0m [90m# Restart a service (Useful after config changes)[0m[0m"
echo -e "[38;5;200msudo poweroff				[0m [90m# Safely shutdown + power off[0m[0m"
echo -e "[38;5;200msudo reboot                        	[0m [90m# Reboot system[0m[0m"
echo -e "[38;5;200msudo shutdown -h now               	[0m [90m# Power off[0m[0m"
echo ""
echo -e "[1;37m --- üêô GIT WORKFLOW üöÄ ---[0m[0m"
echo ""
echo -e "[38;5;211mgit init				[0m [90m# Create a repository in current directory[0m[0m"
echo -e "[38;5;211mgit clone <url>				[0m [90m# Clone repository[0m[0m"
echo -e "[38;5;211mgit -c http.sslVerify=false clone <url>	[0m [90m# Clone repo without verifying SSL certificates[0m[0m"
echo -e "[38;5;211mgit status				[0m [90m# Check repository status[0m[0m"
echo -e "[38;5;211mgit add <file>				[0m [90m# Stage specific file for commit[0m[0m"
echo -e "[38;5;211mgit add .				[0m [90m# Stages ALL changes[0m[0m" 
echo -e "[38;5;211mgit commit -m <message>			[0m [90m# Commit changes[0m[0m"
echo -e "[38;5;211mgit push origin main			[0m [90m# Push changes to the remote server[0m[0m"
echo -e "[38;5;211mgit pull origin main			[0m [90m# Pull latest changes from the server[0m[0m"
echo -e "[38;5;211mgit checkout -b <branch>		[0m [90m# Create a new branch[0m[0m"
echo -e "[38;5;211mgit checkout <branch>			[0m [90m# Switch to an existing branch[0m[0m"
echo -e "[38;5;211mgit merge <branch>			[0m [90m# Merge another branch into current one[0m[0m"
echo ""
echo ""
echo ""





